{"version":3,"sources":["../src/process.js"],"names":["cp","require","util","spawnAsync","command","args","options","res","Promise","resolve","reject","sr","output","stdout","stderr","signal","status","child","spawn","undefined","on","data","toString","code","err","spawnRes","cwd","process","spawnResult","spawnSync","error","spawnResAsync","module","exports"],"mappings":"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","sourcesContent":["// @flow\n'use strict';\n\nconst cp = require('child_process');\nconst util = require('util');\n\nimport type { spawnResult } from './index';\n\nconst spawnAsync = (command: string, args: ?Array<string>, options: child_process$spawnOpts): Promise<spawnResult> => {\n  const res: Promise<spawnResult> = new Promise((resolve, reject) => {\n    const sr: spawnResult = {\n      output: [],\n      stdout: '',\n      stderr: '',\n      signal: null,\n      status: null,\n    };\n    const child = cp.spawn(command, args ? args : options, args ? options : undefined);\n    child.stdout.on('data', (data: Buffer | string) => { // 'close', 'end'\n      sr.stdout = sr.stdout.toString() + data.toString();\n    });\n    child.stderr.on('data', (data: Buffer | string) => { // 'close', 'end'\n      sr.stderr = sr.stderr.toString() + data.toString();\n    });\n    child.on('close', (code: number, signal: string | null) => {\n      if (signal) {\n        reject(signal);\n      } else {\n        sr.status = code;\n        sr.signal = signal;\n        sr.output = ['', sr.stdout.toString(), sr.stderr.toString()];\n        resolve(sr);\n      };\n    });\n    child.on('error', (err: any) => {\n      reject(err);\n    });\n  });\n  return res;\n};\n\n\n// Process spawning stuff\nconst spawnRes = (\n  command: string,\n  args: ?Array<string>,\n  options: ?child_process$spawnSyncOpts\n): boolean => {\n  if (!args) {\n    args = [];\n  }\n  if (!options) {\n    options = { cwd: process.cwd() };\n  } else if (!options.cwd) {\n    options.cwd = process.cwd();\n  }\n  const spawnResult = cp.spawnSync(command, args ? args : options, args ? options : undefined);\n  if (!spawnResult.error && !spawnResult.status) {\n    // && !spawnResult.stderr.toString()) {\n    return true;\n  }\n  // console.log(\"stderr:\");\n  // console.log(spawnResult.stderr.toString());\n  // console.log(`Error from spawnRes ${command}: ${spawnResult.error}`);\n  return false;\n};\n\n// Process spawning stuff\nconst spawnResAsync = async (\n  command: string,\n  args: ?Array<string>,\n  options: ?child_process$spawnOpts\n): Promise<boolean> => {\n  if (!args) {\n    args = [];\n  }\n  if (!options) {\n    options = { cwd: process.cwd() };\n  } else if (!options.cwd) {\n    options.cwd = process.cwd();\n  }\n  const spawnResult = await spawnAsync(command, args, options);\n  if (!spawnResult.error && !spawnResult.status) {\n    // && !spawnResult.stderr.toString()) {\n    return true;\n  }\n  // console.log(\"stderr:\");\n  // console.log(spawnResult.stderr.toString());\n  // console.log(`Error from spawnRes ${command}: ${spawnResult.error}`);\n  return false;\n};\n\nmodule.exports = { spawnAsync, spawnRes, spawnResAsync };\n"],"file":"process.js"}