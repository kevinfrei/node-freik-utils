{"version":3,"sources":["../src/file.js"],"names":["path","require","os","ofs","util","fsx","fs","readFileAsync","promisify","readFile","writeFileAsync","writeFile","statAsync","stat","size","file","statSync","e","sizeAsync","toTextFile","arr","fileName","sep","str","join","writeFileSync","toTextFileAsync","textFileToArray","contents","readFileSync","resultArray","split","filter","trim","length","textFileToArrayAsync","module","exports","arrayToTextFile","arrayToTextFileAsync"],"mappings":"AACA;AAEA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,IAAD,CAAnB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMI,GAAG,GAAGJ,OAAO,CAAC,UAAD,CAAnB;;AAEA,MAAMK,EAAE,GAAG;AACTC,EAAAA,aAAa,EAAEH,IAAI,CAACI,SAAL,CAAeL,GAAG,CAACM,QAAnB,CADN;AAETC,EAAAA,cAAc,EAAEN,IAAI,CAACI,SAAL,CAAeL,GAAG,CAACQ,SAAnB,CAFP;AAGTC,EAAAA,SAAS,EAAER,IAAI,CAACI,SAAL,CAAeL,GAAG,CAACU,IAAnB,CAHF;AAIT,KAAGV;AAJM,CAAX;;AAOA,MAAMW,IAAI,GAAIC,IAAD,IAA0B;AACrC,MAAI;AACF,WAAOT,EAAE,CAACU,QAAH,CAAYD,IAAZ,EAAkBD,IAAzB;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACV,WAAO,CAAC,CAAR;AACD;AACF,CAND;;AAOA,MAAMC,SAAS,GAAG,MAAOH,IAAP,IAAyC;AACzD,MAAI;AACF,WAAO,CAAC,MAAMT,EAAE,CAACM,SAAH,CAAaG,IAAb,CAAP,EAA2BD,IAAlC;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACV,WAAO,CAAC,CAAR;AACD;AACF,CAND;;AAQA,MAAME,UAAU,GAAG,CAACC,GAAD,EAAqBC,QAArB,KAAgD;AACjE,QAAMC,GAAW,GAAGtB,IAAI,CAACsB,GAAL,KAAa,GAAb,GAAmB,IAAnB,GAA0B,MAA9C;AACA,QAAMC,GAAW,GAAGH,GAAG,CAACI,IAAJ,CAASF,GAAT,CAApB;AACAjB,EAAAA,GAAG,CAACoB,aAAJ,CAAkBJ,QAAlB,EAA4BE,GAA5B;AACD,CAJD;;AAMA,MAAMG,eAAe,GAAG,OAAON,GAAP,EAA2BC,QAA3B,KAA+D;AACrF,QAAMC,GAAW,GAAGtB,IAAI,CAACsB,GAAL,KAAa,GAAb,GAAmB,IAAnB,GAA0B,MAA9C;AACA,QAAMC,GAAW,GAAGH,GAAG,CAACI,IAAJ,CAASF,GAAT,CAApB;AACA,QAAMhB,EAAE,CAACI,cAAH,CAAkBW,QAAlB,EAA4BE,GAA5B,CAAN;AACD,CAJD;;AAMA,MAAMI,eAAe,GAAIN,QAAD,IAAqC;AAC3D,QAAMO,QAAgB,GAAGvB,GAAG,CAACwB,YAAJ,CAAiBR,QAAjB,EAA2B,MAA3B,CAAzB;AACA,QAAMS,WAAW,GAAGF,QAAQ,CAACG,KAAT,CAAe,OAAf,CAApB;AACA,SAAOD,WAAW,CAACE,MAAZ,CAAmBT,GAAG,IAAIA,GAAG,CAACU,IAAJ,GAAWC,MAAX,GAAoB,CAA9C,CAAP;AACD,CAJD;;AAMA,MAAMC,oBAAoB,GAAG,MAAOd,QAAP,IAAoD;AAC/E,QAAMO,QAAgB,GAAG,MAAMtB,EAAE,CAACC,aAAH,CAAiBc,QAAjB,EAA2B,MAA3B,CAA/B;AACA,QAAMS,WAAW,GAAGF,QAAQ,CAACG,KAAT,CAAe,OAAf,CAApB;AACA,SAAOD,WAAW,CAACE,MAAZ,CAAmBT,GAAG,IAAIA,GAAG,CAACU,IAAJ,GAAWC,MAAX,GAAoB,CAA9C,CAAP;AACD,CAJD;;AAMAE,MAAM,CAACC,OAAP,GAAiB;AACfvB,EAAAA,IADe;AAEfI,EAAAA,SAFe;AAGfC,EAAAA,UAHe;AAIfO,EAAAA,eAJe;AAKfY,EAAAA,eAAe,EAAEnB,UALF;AAMfoB,EAAAA,oBAAoB,EAAEb,eANP;AAOfC,EAAAA,eAPe;AAQfQ,EAAAA;AARe,CAAjB","sourcesContent":["// @flow\n// @format\n\n'use strict';\nconst path = require('path');\nconst os = require('os');\nconst ofs = require('fs');\nconst util = require('util');\n\nconst fsx = require('fs-extra');\n\nconst fs = {\n  readFileAsync: util.promisify(ofs.readFile),\n  writeFileAsync: util.promisify(ofs.writeFile),\n  statAsync: util.promisify(ofs.stat),\n  ...ofs\n};\n\nconst size = (file: string): number => {\n  try {\n    return fs.statSync(file).size;\n  } catch (e) {\n    return -1;\n  }\n};\nconst sizeAsync = async (file: string): Promise<number> => {\n  try {\n    return (await fs.statAsync(file)).size;\n  } catch (e) {\n    return -1;\n  }\n};\n\nconst toTextFile = (arr: Array<string>, fileName: string): void => {\n  const sep: string = path.sep === '/' ? '\\n' : '\\r\\n';\n  const str: string = arr.join(sep);\n  fsx.writeFileSync(fileName, str);\n};\n\nconst toTextFileAsync = async (arr: Array<string>, fileName: string): Promise<void> => {\n  const sep: string = path.sep === '/' ? '\\n' : '\\r\\n';\n  const str: string = arr.join(sep);\n  await fs.writeFileAsync(fileName, str);\n};\n\nconst textFileToArray = (fileName: string): Array<string> => {\n  const contents: string = fsx.readFileSync(fileName, 'utf8');\n  const resultArray = contents.split(/\\n|\\r/);\n  return resultArray.filter(str => str.trim().length > 0);\n};\n\nconst textFileToArrayAsync = async (fileName: string): Promise<Array<string>> => {\n  const contents: string = await fs.readFileAsync(fileName, 'utf8');\n  const resultArray = contents.split(/\\n|\\r/);\n  return resultArray.filter(str => str.trim().length > 0);\n}\n\nmodule.exports = {\n  size,\n  sizeAsync,\n  toTextFile,\n  toTextFileAsync,\n  arrayToTextFile: toTextFile,\n  arrayToTextFileAsync: toTextFileAsync,\n  textFileToArray,\n  textFileToArrayAsync\n};\n"],"file":"file.js"}