{"version":3,"sources":["../src/AppConfig.js"],"names":["path","require","ofs","os","util","fs","readFileAsync","promisify","readFile","writeFileAsync","writeFile","FTON","GetFilePath","name","join","homedir","Get","configFile","contents","readFileSync","parse","e","GetAsync","Save","data","writeFileSync","JSON","stringify","SaveAsync","module","exports"],"mappings":"AACA;AACA,a,CAEA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,IAAD,CAAnB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMI,EAAE,GAAG;AACTC,EAAAA,aAAa,EAAEF,IAAI,CAACG,SAAL,CAAeL,GAAG,CAACM,QAAnB,CADN;AAETC,EAAAA,cAAc,EAAEL,IAAI,CAACG,SAAL,CAAeL,GAAG,CAACQ,SAAnB,CAFP;AAGT,KAAGR;AAHM,CAAX,C,CAMA;;AACA,MAAM;AAAES,EAAAA;AAAF,IAAWV,OAAO,CAAC,UAAD,CAAxB,C,CAEA;;;AAGA,MAAMW,WAAW,GAAIC,IAAD,IAA0B;AAC5C,SAAOb,IAAI,CAACc,IAAL,CAAUX,EAAE,CAACY,OAAH,EAAV,EAAwB,SAAxB,EAAoC,GAAEF,IAAK,OAA3C,CAAP;AACD,CAFD;;AAIA,MAAMG,GAAG,GAAIH,IAAD,IAA6B;AACvC,QAAMI,UAAU,GAAGL,WAAW,CAACC,IAAD,CAA9B;;AACA,MAAI;AACF,UAAMK,QAAgB,GAAGb,EAAE,CAACc,YAAH,CAAgBF,UAAhB,EAA4B,MAA5B,CAAzB;AACA,WAAON,IAAI,CAACS,KAAL,CAAWF,QAAX,CAAP;AACD,GAHD,CAGE,OAAOG,CAAP,EAAU,CAAG;AAChB,CAND;;AAQA,MAAMC,QAAQ,GAAG,MAAOT,IAAP,IAA4C;AAC3D,QAAMI,UAAU,GAAGL,WAAW,CAACC,IAAD,CAA9B;;AACA,MAAI;AACF,UAAMK,QAAgB,GAAG,MAAMb,EAAE,CAACC,aAAH,CAAiBW,UAAjB,EAA6B,MAA7B,CAA/B;AACA,WAAON,IAAI,CAACS,KAAL,CAAWF,QAAX,CAAP;AACD,GAHD,CAGE,OAAOG,CAAP,EAAU,CAAG;AAChB,CAND;;AAQA,MAAME,IAAI,GAAG,CAACV,IAAD,EAAeW,IAAf,KAA2C;AACtD,QAAMP,UAAU,GAAGL,WAAW,CAACC,IAAD,CAA9B;;AACA,MAAI;AACFR,IAAAA,EAAE,CAACoB,aAAH,CAAiBR,UAAjB,EAA6BS,IAAI,CAACC,SAAL,CAAeH,IAAf,CAA7B,EAAmD,MAAnD;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOH,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF,CARD;;AAUA,MAAMO,SAAS,GAAG,OAAOf,IAAP,EAAqBW,IAArB,KAA0D;AAC1E,QAAMP,UAAU,GAAGL,WAAW,CAACC,IAAD,CAA9B;;AACA,MAAI;AACF,UAAMR,EAAE,CAACI,cAAH,CAAkBQ,UAAlB,EAA8BS,IAAI,CAACC,SAAL,CAAeH,IAAf,CAA9B,EAAoD,MAApD,CAAN;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOH,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF,CARD;;AAUAQ,MAAM,CAACC,OAAP,GAAiB;AAAEd,EAAAA,GAAF;AAAOM,EAAAA,QAAP;AAAiBC,EAAAA,IAAjB;AAAuBK,EAAAA,SAAvB;AAAkChB,EAAAA;AAAlC,CAAjB","sourcesContent":["// @flow\n// @format\n'use strict';\n\n// NodeJS modules\nconst path = require('path');\nconst ofs = require('fs');\nconst os = require('os');\nconst util = require('util');\n\nconst fs = {\n  readFileAsync: util.promisify(ofs.readFile),\n  writeFileAsync: util.promisify(ofs.writeFile),\n  ...ofs\n};\n\n// My modules\nconst { FTON } = require('my-utils');\n\n// Some Flow types & whatnot\nimport type { FTONData } from 'my-utils';\n\nconst GetFilePath = (name: string): string => {\n  return path.join(os.homedir(), '.config', `${name}.json`);\n};\n\nconst Get = (name: string): ?FTONData => {\n  const configFile = GetFilePath(name);\n  try {\n    const contents: string = fs.readFileSync(configFile, 'utf8');\n    return FTON.parse(contents);\n  } catch (e) { }\n};\n\nconst GetAsync = async (name: string): Promise<?FTONData> => {\n  const configFile = GetFilePath(name);\n  try {\n    const contents: string = await fs.readFileAsync(configFile, 'utf8');\n    return FTON.parse(contents);\n  } catch (e) { }\n};\n\nconst Save = (name: string, data: FTONData): boolean => {\n  const configFile = GetFilePath(name);\n  try {\n    fs.writeFileSync(configFile, JSON.stringify(data), 'utf8');\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst SaveAsync = async (name: string, data: FTONData): Promise<boolean> => {\n  const configFile = GetFilePath(name);\n  try {\n    await fs.writeFileAsync(configFile, JSON.stringify(data), 'utf8');\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nmodule.exports = { Get, GetAsync, Save, SaveAsync, GetFilePath };\n"],"file":"AppConfig.js"}